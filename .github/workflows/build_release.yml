name: Generate latest builds
on:
  release:
    types:
      - created
  push:
    branches: ["master"]
    tags:
      - "v*"
  pull_request:
    branches: ["master", "dev*"]

jobs:
  run_pytest:
    name: HiCT Library autotests
    continue-on-error: true
    runs-on: [ "ubuntu-latest" ]
    
    defaults:
      run:
        working-directory: ./HiCT_Library

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>=3.9 <3.11'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Install dependencies
      run: |
	pip install -r requirements-dev.txt || true
        pip install -r requirements.txt
    - name: Launch PyTest
      run: pytest -v .

  build_hict_library:
    name: Build HiCT Library wheel
    continue-on-error: true
    runs-on: [ "ubuntu-latest" ]
    
    defaults:
      run:
        working-directory: ./HiCT_Library

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>=3.9 <3.11'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt || true
        pip install -r requirements.txt
    - name: Build HiCT_Library wheel
      run: python setup.py bdist_wheel
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: hict_library_wheel
        path: |
          **/dist/*.whl  
  
  build_hict_tools:
    name: Build HiCT-based python tools (${{ matrix.tool_name }})
    needs: [ "build_hict_library" ]
    continue-on-error: true
    
    strategy:
      matrix:
        os: [ "ubuntu-latest" ]
        include:
          - tool_name: "HiCT Server"
            tool_submodule: "HiCT_Server"
          - tool_name: "HiCT Utils"
            tool_submodule: "HiCT_Utils"

    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        working-directory: ./${{ matrix.tool_submodule }}
    
    steps:
    - name: Load built HiCT_Library
      uses: actions/download-artifact@v3
      with:
        name: hict_library_wheel
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: List files
      run: ls -alRh
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>=3.9 <3.11'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Install build dependencies
      run: |
        cd "${{ matrix.tool_submodule }}"
        pip install -r requirements-dev.txt || true
    - name: Install previously built HiCT library
      run: pip install *.whl && rm -rf *.whl
    - name: Install main dependencies
      run: |
        cd "${{ matrix.tool_submodule }}"
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || true
      continue-on-error: true
    - name: Build HiCT_Server wheel
      run: |
        cd "${{ matrix.tool_submodule }}"
        python setup.py bdist_wheel
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: "${{ matrix.tool_submodule }}"
        path: |
          ./"${{ matrix.tool_submodule }}"/**/dist/*.whl

    
    
  build_web_ui:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            npm-task: "app:linuxbuild"
            artifact-name: "linuxbuild"
          - os: "windows-latest"
            npm-task: "app:winbuild"
            artifact-name: "winbuild"

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: 16
      - name: Install dependencies
        run: cd HiCT_WebUI; npm install
      - name: Build electron app (linux)
        run: export GH_TOKEN=${{ secrets.GITHUB_TOKEN }} && cd HiCT_WebUI && npm run ${{ matrix.npm-task }}
        if: runner.os == 'Linux'
      - name: Build electron app (windows)
        run: powershell "[Environment]::SetEnvironmentVariable('GH_TOKEN','${{ secrets.GITHUB_TOKEN }}','User'); cd HiCT_WebUI; npm run ${{ matrix.npm-task }}"
        if: runner.os == 'Windows'
      - name: Publish build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hict_trunk_build_${{ matrix.artifact-name }}
          path: |
            release/*/*.AppImage
            release/*/*.zip
            release/*/*.exe
            !release/**/*.yml

  release:
    runs-on: "ubuntu-latest"
    needs: [ "build_hict_library", "build_hict_tools", "build_web_ui" ]
    steps:
      - name: Download linux release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_trunk_build_linuxbuild
      - name: Download windows release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_trunk_build_winbuild
      - name: Download HiCT_Library release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_library_wheel
      - name: Download HiCT_Server release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_server_wheel
      - name: Download HiCT_Utils release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_utils_wheel
      - name: List available files
        run: ls -alR
      - name: Generate latest release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Latest autogenerated build"
          files: |
            **/*.zip
            **/*.exe
            **/*.AppImage
            **/*.whl
