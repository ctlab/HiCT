name: Generate latest builds
on:
  release:
    types:
      - created
  push:
    branches: ["master"]
    tags:
      - "v*"
  pull_request:
    branches: ["master", "dev*"]

jobs:
  run_pytest:
    continue-on-error: true
    runs-on: [ "ubuntu-latest" ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>= 3.10'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        check-latest: true
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Install dependencies
      run: pip install -r **/*requirements*.txt
    - name: Launch PyTest
      run: pytest .
      continue-on-error: true


  build_hict_library:
    continue-on-error: true
    runs-on: [ "ubuntu-latest" ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>= 3.10'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        check-latest: true
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Install dependencies
      run: pip install -r **/*requirements*.txt
    - name: Build HiCT_Library wheel
      run: cd HiCT_Library && python setup.py bdist_wheel
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: hict_library_wheel
        path: |
          **/dist/*.whl  
  
  build_hict_server:
    runs-on: [ "ubuntu-latest" ]
    needs: [ "build_hict_library" ]
    continue-on-error: true

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>= 3.10'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        check-latest: true
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Load built HiCT_Library
      uses: actions/download-artifact@v3
      with:
        name: hict_library_wheel
    - name: Install HiCT_Library
      run: pip install **/*.whl
    - name: Install other dependencies
      run: pip install -r HiCT_Server/*requirements*.txt
    - name: Build HiCT_Server wheel
      run: cd HiCT_Server && python setup.py bdist_wheel
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: hict_server_wheel
        path: |
          **/dist/*.whl  
            
  build_hict_utils:
    runs-on: [ "ubuntu-latest" ]
    needs: [ "build_hict_library" ]
    continue-on-error: true

    steps:
    - name: Checkout sources
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup Python
      uses: actions/setup-python@v4.3.1
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: '>= 3.10'
        # Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry.
        cache: pip
        # The target architecture (x86, x64) of the Python or PyPy interpreter.
        architecture: x64
        # Set this option if you want the action to check for the latest available version that satisfies the version spec.
        check-latest: true
        # Set this option if you want the action to update environment variables.
        update-environment: true
        cache-dependency-path: |
          **/*requirements*.txt
    - name: Load built HiCT_Library
      uses: actions/download-artifact@v3
      with:
        name: hict_library_wheel
    - name: Install HiCT_Library
      run: pip install **/*.whl
    - name: Install other dependencies
      run: pip install -r HiCT_Utils/*requirements*.txt
    - name: Build HiCT_Utils wheel
      run: cd HiCT_Utils && python setup.py bdist_wheel
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v3
      with:
        name: hict_utils_wheel
        path: |
          **/dist/*.whl
    
    
  build_web_ui:
    strategy:
      matrix:
        include:
          - os: "ubuntu-latest"
            npm-task: "app:linuxbuild"
            artifact-name: "linuxbuild"
          - os: "windows-latest"
            npm-task: "app:winbuild"
            artifact-name: "winbuild"

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: 16
      - name: Install dependencies
        run: npm install
      - name: Build electron app (linux)
        run: export GH_TOKEN=${{ secrets.GITHUB_TOKEN }} && npm run ${{ matrix.npm-task }}
        if: runner.os == 'Linux'
      - name: Build electron app (windows)
        run: powershell "[Environment]::SetEnvironmentVariable('GH_TOKEN','${{ secrets.GITHUB_TOKEN }}','User'); npm run ${{ matrix.npm-task }}"
        if: runner.os == 'Windows'
      - name: Publish build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hict_trunk_build_${{ matrix.artifact-name }}
          path: |
            release/*/*.AppImage
            release/*/*.zip
            release/*/*.exe
            !release/**/*.yml

  release:
    runs-on: "ubuntu-latest"
    needs: [ "build_hict_library", "build_hict_server", "build_hict_utils", "build_web_ui" ]
    steps:
      - name: Download linux release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_trunk_build_linuxbuild
      - name: Download windows release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_trunk_build_winbuild
      - name: Download HiCT_Library release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_library_wheel
      - name: Download HiCT_Server release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_server_wheel
      - name: Download HiCT_Utils release
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: hict_utils_wheel
      - name: List available files
        run: ls -alR
      - name: Generate latest release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: true
          title: "Latest autogenerated build"
          files: |
            **/*.zip
            **/*.exe
            **/*.AppImage
            **/*.whl
